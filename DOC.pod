=begin copyright

Hexdens density plot program

Copyright 2003--2018 John Lapeyre, All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

=end copyright


=cut

=begin comment

   hexdens -- Programmers' notes.
   An identifier begins with a capital letter if and only if it is
   global (declared with 'our').
   Sections of this file and related groups of routines are separated
   by a bar like this '#==== ...'.
   A block that serves only to implement scoping of variables to be shared
   by some routines is enclosed with bars like this '#*=*=*=* ...' .

   See BUGS section below for things that need to be fixed.

This file is organized (!) as follows from top to bottom:

* Pod documentation. This is the source for man page, html, etc. as is usual with
  pod. It also has to local directives that are used to extract short interactive
  help messages. So the format (not documented) should be followed.

* The interactive mode code. It is in the Shell package.

* Hmm the rest has been put into comment boxes marked with the string 'SECTION'.

=end comment


=cut

=head1  NAME

B<hexdens> v0.26 --  create density plots on a triangular or square lattice in postscript
or pdf format.

=head1  SYNOPSIS

usage: hexdens [options] [F<infilename1>, F<infilename2> ...]

=head1 DESCRIPTION

C<hexdens> reads data from the input files specified on command line
and, for each one, writes color or grayscale density plots.  The input
data is assumed to be on a rectangular or triangular lattice. For the
triangular(square) lattice, each coordinate pair in the input file is
covered with a hexagon(square). Other data formats and plotting styles
are available as well. C<hexdens> includes a PostScript driver, and
supports PDF if C<ghostscript> is installed.  C<hexdens> also operates
in an interactive mode.

=head2 Quick start

C<hexdens -ps data.dat> -- write a density plot data.dat.ps of a regular square
(or rectangular) array of data points from a file. This example requires only the
core (standard) perl installation. No non-core perl modules or external programs
are required.

C<hexdens data.dat> -- write a density plot data.dat.pdf of a regular square
(or rectangular) array of data points from a file.

C<hexdens -i data.dat> -- write a density plot and display the result in the
pdf viewer and enter interactive mode.

C<hexdens -tri data.dat> -- write a density plot data.dat.pdf of data on a triangular
lattice from a file with lines of the form 'x y val', where at least one of the nearest
neighbors to the first point is present. (There can be 'holes' or missing points in the
remainder of the data set.)

=head2 Why another plotting program?

=over 1

=item 1   I could not find a program that can make a density plot of hexagonal tiles on
a triangular lattice.

=item 2 The method of producing plots is different from most
other methods. For instance, gnuplot's pm3d can be applied
in more cases, but produces an essentially different plot.

=item 3 To produce PostScript plots, hexdens requires only a
standard perl installation, which is present on all Linux
and nearly all Unix machines.  (But you probably want to
generate eps or pdf, in which case ghostscript is required,
but this is also standard on Unix/Linux; see below.)  The
hexdens program is a single file that needs no compilation
or installation and generates documentation and
parameter files and examples. I wrote it after trying
downloading/compiling/getting licenses/libraries for a bunch
of programs that couldn't do a density plot on a triangular
lattice anyway. (This was in 2003, perhaps there are more programs
available now that are easier to install.) See
REQUIREMENTS AND DEPENDENCIES below for other features and requirements.


=back

=head2 Plotting options

Most plotting options, (axes, labels, etc.) are controlled
through command line options or interactively, more are available by setting
parameters in a parameter file. Command line
options override settings in the parameter file. See the B<save> and
B<load> commands and the B<paramfile> option for saving and restoring the current parameter values.
See the section SAVING AND RESTORING SETTINGS below for more information.

=head2 Interactive mode

Interactive mode is entered by either omitting a data filename on the command line
or giving the option B<-i>.
Here is an example:

 myshellprompt > hexdens -i sq1.dat
 hexdens> plot
 hexdens> set title 'This is the title'
 hexdens> plot
 hexdens> plot 'other.dat'

In the example, the first plot is displayed twice, adding a title the second time. Then, data from
a second data file is plotted. If Term::Readline is installed on your system (It is available
as a package in all linux distributions.) then you can use command history and tab completion.
(Ie, hit 'tab' twice after typing a bit.)
Try tab completion in various contexts. (In particular, this document may be out of date,
and tab completion can show available commands or arguments.)
The following lists commands recognized in the interactive mode.

=head3 Commands in interactive mode


=over 1

=item B<h>

Print command line options

=item B<help> I<TOPIC>

Print brief help on a topic. Hit TAB twice to see list of topics (if perl-gnu readline is installed).
The content of brief help is taken from the man and html pages.

=item B<man>

View long documentation as unix man page.


=item B<html>

Print documentation to  hexdens.html and try to open it in a browser (firefox by default)

=for trihelp commands start

=item B<plot> I<FILENAME>

write (or rewrites) the output plot file. If FILENAME is given as an argument (in single quotes) then
the data is read (or reread) from the file. If there is no argument, then the most recently read
data is used. If you have set the option B<-dis> then hexdens will try to display the plot
immediately in a viewer (which can be configured to be xpdf or ghostview.)

=item B<replot>

Reread the data from the most recently read input data file
and replot the data. If an argument is given, data is
instead read from the file named in the argument. This is
equivalent to using B<read> and then B<plot>.

=item B<set> I<OPTION> I<VALUE> ...

Set the value of an option (or options). If the option is
boolean then I<VALUE> must be omitted.  In interactive mode,
boolean options are set with B<set> and unset with B<unset>.
When starting hexdens from the command line boolean options
are unset by prefixing the option name with 'no'.  For
example: C<set cmgray title 'title of plot'>, sets the title
and sets grayscale mode.  On the command line C<-nokey>
supresses drawing the color key, while in interactive mode
this is done with C<unset key>.  The leading '-' can be
omitted in interactive mode (except when needed for
disambiguations). For example C<set xmin 0> to set the lower
limit of the x-axis to 0. You may also put an '=' with no intervening
spaces between the option and the value.


=item B<unset>

see B<set>.

=item B<show> I<OPTION> ...

Display the value variables set by an option (or options)
You can omit the leading dash '-' on the option when using show.
For example if the color map is set to B<cmhue> rather than B<cmgray>:

  hexdens> show cmgray title
  ColorMap = hue
  Title = ''

=item B<fshow> I<PATTERN>

print all plot parameter values preceded by a list of
command line switches that can be used to set them. This list
of options is printed because more than one option
may set the same variable, eg, B<-axis> and B<-noaxis>. The
optional argument I<PATTERN> causes fshow to print only those
parameters matching the argument. (The pattern is typically
a string, but it can be a perl regular expression.)
Currently, they are shown in alphabetical order, which is
not so useful. For example C<fshow axis> prints all parameters or options
containing the string C<axis>.

=item B<startviewer>

Launch a viewer that displays the plot.
Useful for instance to relaunch the viewer if it is killed or crashes.
(But this should happen automatically in most cases.)

=item B<holdview>

Show each plot in a single viewer. If not set, then a new viewer is
started for each plot. If B<holdview> is unset and then set, then
the most recent viewer is used for the next plot.

=item B<example> I<N>

Write example plot number I<N> and display it in the viewer.

=item B<read> I<somefile.data>

Reads the data from the file, that can then be plotted with
B<plot>. Use this to force rereading of data file.  You can also use
C<plot 'filename'>, but it will not re-read the data.

=item B<save> I<configfile>

Save the current plotting options to the file I<configfile> or
'save.hexdens' if I<configfile> is omitted. This
saves the options that are currently set. When starting a new hexdens
session, the command B<load> will restore the saved parameter
settings. There is no 'save'
command for the plot itself, as it always written to a file.

=item B<load> I<configfile>

Load saved plotting options from the file I<configfile> or 'save.hexdens' if I<configfile> is omitted.
If the default filename for saved parameters 'save.hexdens' is found when hexdens starts, then
it will be loaded automatically.

=item B<textdoc>

Print this entire user documentation as plain text. Using B<man> or B<html> if possible
preferrable.

=item B<listcolors>, B<listsymbols>, B<listfonts>, B<findcolors>

=for trihelp commands stop

These are commands corresponding to
the command line options of the same names described below.

=for trihelp commands start

=item B<exit>

quit interactive mode and exit hexdens

=item B<quit>

quit interactive mode and exit hexdens

=for trihelp commands stop

=back

All commands above may be abbreviated. Although not normally
useful, typing the name of a
'variable' prints its value, with the variable as it appears
in the configuration file F<.hexdens> (described below)
except that it is prepended with C<Hexdens::>, eg
C<$Hexdens::Title>.  To change plot parameters you may use
B<set> as in the example above. Although usually not necessary,
you may also use the variables as they appear in the file F<.hexdens>, again with
the prefix. For example C<$Hexdens::Title = 'title of plot'>.
Note that all variables begin with a dollar sign, as in the
perl language.

If possible a viewer is started to monitor
the output file and update upon replotting. The default viewer is xpdf
which is set in the configuration file F<.hexdens> (see below).

With the addition of recognizing a few commands, the
interactive mode is executing your input as perl code. So
you can enter things like C<1+1> and C<sin($Pi/4)> .  (C<$Pi>
and C<$E> are defined.) The user can declare new variables
without the prefix for use only in the interactive
shell. For example:

 hexdens> $x = 1
 1
 hexdens> set title 'Plot number $x'
 hexdens> pl 'sq1.dat'

Note that the value of C<$x> is interplotated into the title string. (In perl
single quotes do not cause interpolation, but here they do.)

If a line begins with C<!> the remainder will be passed to the
shell. For example C<!ls> will list the directory contents (in unix-like OS's).

=head3 Command line editing

The up-arrow and down-arrow recall the previous and next
command in the command history. Ctrl-p and Ctrl-n do the
same thing. Command line editing is in the 'emacs' style by
default. That is ctrl-a goes to the beginning of the
line. Ctrl-e to the end. ctrl-d deletes a character, etc. It
is probably possible to change this somehow. You can press the tab while
entering commands to display possible completions.
All these editing features are part of the
perl 'Readline' packages and may vary with or be missing
from your perl installation. Full support is offered by the
perl interface to gnu readine (Named something like
libterm-readline-gnu-perl) is available in linux
distributions.)

=head2 Data file format

An attempt is made to detect one of the two supported data file formats automatically
(but this behavior can be disabled or overidden. See
B<-autodata> and  B<-grided>.)
In the standard format, the input data file must have lines of the form

 x y val

which causes a polygon with coloring representing val to be drawn at
the point x,y.  Numbers can be separated by whitespace (spaces,tabs)
or commas or anything not used to denote numbers (ie, digits . + - e
E). Leading whitespace is ignored. Comment lines in the data file can
 start with the characters $ % ; ! # .  If the option B<-grided> (with
details described below) is set (or autodata detection is set) then
the data file must consist of only the values, with the coordinates
implied by the row and column of the number. In the grided format an n
by m plot will be produced from a data file with m lines and n numbers
in each line, but holes are allowed. For example, the data file

 1 2 3
 4 5 6
 7 8

will produce a 3 by 3 plot with one missing square and eight
colors or intensities. But, if both B<-noautodata> and B<-nogrided> are set,
then this data file will print two tiles and the last line, which is
invalid, will be ignored.

The program does not assume that the data is on a triangular
grid-- the coordinates x,y can be any numbers. But a hexagon
(or square) is drawn at the coordinates of each data point
in the input file, so that, if a data point exists for each
vertex of a triangular(square) lattice within a region, all
space on the plot is filled and no hexagons(squares)
overlap. You do not have to supply a data point for each point
in the region plotted; there can be holes in the data.

The length of the sides of the polygons is computed from the
distance from the first data point to the point nearest to
the first point in such a way that all the plot surface is
covered with no overlap if nearest neighbor distances are
all the same. This can be turned off with option
B<-noautolength> or by giving the option B<-sidelength>, in
which case the length of the side must be set explicitly on
the command line or in interactive mode.
If the data is on a square lattice with different units on
the x- and y- axes (e.g. time and distance) use the
B<-nosameunits> option below (this is the default). In this
case nearest points to the first point in both the x- and y-
directions are computed to determine the length of the sides
in physical units.

This is  tested under Linux. It probably will
not work on MS and Apple platforms without some work.

=head2 Output file format

The output file can be one of F<infilename.ps>,
F<infilename.eps>, or F<infilename.pdf>.  You need to have
ghostscript installed in order to write eps or pdf.  (All
Linux and most Unix installations should have
ghostscript. It is available for MS platforms. If you can
view a PostScript document under Linux/Unix/MS Windows you
almost certainly have ghostscript installed as the
backend. )  You may also use some external conversion
program to get pdf and eps from the ps generated by hexdens.

=head2 Text in title and labels

Arguments that are text strings are enclosed in single or double quotes.
Superscripts and subscripts, fonts, colors, and fine control
of spacing are implemented using escape codes in the text
strings. Each code consists of a backslash C<\> followed by
one or more characters (neither backslash nor space)
followed a space. For example the option: C<-xlabel '\sym x\^ 2'>
prints a Greek letter xsi with a superscript C<2> as
the x-axis label. The string C<'e\^ \h-2 -\sym x\rm \^2 2'>
prints C<e> with C<-xsi> as a superscript and C<2> as a
supersuperscript, with a negative horizontal half space
before the minus sign. This is roughly equivalent to the TeX
code C<e^{-\xi^2}>; here TeX is smart enough to
automatically position the elements, whereas with F<hexdens>
fine spacing must be done manually.

The codes are as follows:

=over 1

=item C<\rm >  C<\sym >  C<\bf >  C<\it >  C<\bi >

Select roman, symbol, boldface, italic, or boldface-italic
font. (The symbol font has Greek letters and other math symbols)
The specific fonts
corresponding to these codes can be changed in the
F<.hexdens>. You can set the environment variable C<GS_FONTPATH> of the shell in which
you run hexdens to use fonts than that are not in the default path
of ghostscript. There is a C<$FontPath> parameter in F<.hexdens> that does
the same thing. If you produce pdf using B<-pdf> then the fonts will
be embedded by gs in the file containing the plot, making the plot portable.
(Currently this is not available for ps and eps. But producing pdf and
then using a program such as pdftops will produce an eps plot with high
quality embedded fonts.)

=item C<\^ >  C<\^2 >  C<\_ >  C<\- >

Switch to superscript, supersuperscript, subscript, or no super-/sub- script mode. The
code C<\- > is used to leave super and subscript modes. These are a bit crude in positioning,
but they can be adjusted, for instance with spacing codes given below.

=item C<\h+ > C<\h+2 >  C<\h- > C<\h-2 >  C<\v+ > C<\v+2 >  C<\v- >  C<\v-2 >

These are horizontal space, horizontal half space, horizontal negative space, horizontal negative half
space and the corresponding vertical spaces. You can write C<\h+n > etc. for n=2,3,4,5, where the
spaces decrease in size by a factor of one half with each increment of n. For instance C<\v-5 > is a negative
one-sixteenth vertical space.

=item C<\colorname >

This changes the text color. To see the list of color names, type C<hexdens -listcolors n>,
or C<listcolors n> in interactive mode. If you omit the C<n>,
then four columns are printed. If you include an integer argument C<n>, then n columns
are printed. These colors are approximately the X11 colors, which can be found (with swatches)
many places on the web (eg Wikipedia). Any spaces in color names are converted to underscores
in hexdens. In addition to those listed, there are gray1, through gray99, which goes from
almost black to almost white. For example: C<-title '\red A \blue B \green C'>.

=item C<\symbolname >

This prints a symbol from the Adobe symbol font by name, without explicitly changing the font. That is,
you can insert theses symbol names in normal text. To see a list of symbol names use the option
B<-listsymbols>. For example: C<'\sigma \^ 2'>. There are also some aliases from TeX/LaTeX to
the Adobe symbol names

=item  C<\\>  C<\nnn>

A double backslash is used to represent a literal backslash. A backslash followed by three digits C<nnn>
prints the character corresponding to the octal character code C<nnn>. Refer to
PostScript documentation for a list of these character codes. Note these
two codes do not include a final space C<' '>.

=back

The font and super/sub script changes remain in effect until they are
changed by another font or super/sub script code.

=head1 EXAMPLES

C<hexdens  mysdata>

Write a density plot to F<mysdata.pdf>
after reading data on a square grid from file F<mysdata>. Size of squares covering the
plot are computed automatically: The distance to the closest data point from the
first data point is used for the length of a side.

C<hexdens -eps -tri mytdata>

Write density plot on triangular grid (covered with hexagons) to F<mytdata.eps> after reading data
from file F<mytdata>. Size of hexagons computed automatically.


Further examples of plots illustrating the use of various arguments
can be generated using B<-ex> I<n>. For instance C<hexdens -ex 2>
creates the second example plot. You can see the example plot
immediately if you use C<hexdens -display -ex 2>.

Using C<hexdens -demo>, produces all the examples sequentially and launhces the viewer to view them,
prompting the user after each plot. C<hexdens -demo N> instead pauses for N seconds between example
plots.

=head1 HINTS

It is usually necessary to enclose strings such as the title
string in single quotes rather than double quotes to prevent
perl or the shell from trying to interpret the escaped
hexdens codes.

If labels or other elements of the plot are clipped by the edge of the drawing surface,
try reducing the size of the plot with B<-plotwidth>

=head1 OPTIONS

These options may be given on the command line or in interactive mode.
Important! Setting an option to false is done by prefixing the option
with C<no> when passing command line options to hexdens from a shell
(ie B<-nokey>). In interactive mode, the option is set to false with
'unset' (ie B<unset key>).

The options listed here may  also be used in interactive
mode using the B<set> command. In this case the leading C<-> may
be omitted. Their values can be displayed with the B<show> command.
Any options below that take an
argument can have either spaces between the option name and
the argument or a C<=> between the option name and the
argument. You are only required to give enough of the
characters in an option to distinguish it from other
options. For example B<-sa> for B<-saturation>.  All gray
values use: 0=black, 1=white.

For example, on the command line:
 shellprompt> hexdens -xlabel 'A label'

In interactive mode:
 hexdens> show xlabel
 XLabel = ''
 hexdens> set xlabel  'A label'
 hexdens> set -xlabel 'B label'
 hexdens> set xlabel='C label'
 hexdens> set -xlabel='D label'
 hexdens> show xlabel
 XLabel = 'D label'

=head2    Input mode:

B<-i> Run in interactive mode

=for trihelp options start

B<-batch> I<FILE>
Process commands in file I<FILE> as if in interactive mode.
If the last statement in I<FILE> is not B<exit>, then interactive mode continues after
I<FILE> is processed.

=head2    Documentation:

B<-h>
print short(ish) help message.

B<-man>
view long documentation as unix man page. Broken on
some platforms (eg, BSD), but B<-mandoc> might still work.

B<-mandoc>
print documentation as man page to file hexdens.1

B<-htmldoc>
print documentation to  hexdens.html

B<-html>
print documentation to  hexdens.html and try to open it in a browser (firefox by default)

B<-textdoc>
print documentation as plain text to standard output.

B<-poddoc>
write the documentation in pod format to the file README.pod

B<-pdfdoc>
print documentation as a pdf file via latex. You must have latex and
pdflatex installed.

B<-paramfile>
write parameter startup file template to the file .hexdens
This template can be edited. If present, it will be read before
processing command line arguments. Currently only works from command
line; not in interactive mode. See also the  B<save> command, which
is a newer method to store preferred paramter values in a file.
The option B<-paramfile> differs from B<save> in that the former
writes a copy of the default parameters, whereas the latter writes the
current state of the options.

=head2     Plot Contents:

If  B<-square>, B<-tri>, or B<-circle> are set interactively, then B<replot> rather
than B<plot> must be used.

B<-square>
(default) If set, the data is plotted by drawing square tiles at data
coordinates, not hexagons. By default this uses the B<-nosameunits>
option. But for a data file with a nearest neighbor of the first point
absent in one of the x or y directions, setting B<-sameunits> will be
sucessful as long as a nearest neighbor is present in one direction.

B<-tri>
assume a triangular lattice, I<ie> the data is plotted by drawing
hexagonal tiles centered at data coordinates. This option
automatically sets the B<-sameunits> option.

B<-circle>
The data is plotted by drawing circular tiles centered at data
coordinates. This option automatically sets the B<-sameunits> option.

B<-sidelength> I<SIDELENGTH>
length of sides of polygons covering the density plot. By
default, this is computed automatically and this option need not be given.

B<-xsidelength> I<SIDELENGTH>
length of sides on x-axis. Use only if -nosameunits
and -noautolength are both set.

B<-ysidelength> I<SIDELENGTH>
length of sides on y-axis. Use only if -nosameunits
and -noautolength are both set.

B<-autolength>  B<-noautolength>
(default) compute length of side of polygon from smallest distance
between data points.

B<-sameunits>  B<-nosameunits>
If set, assume x and y coordinates are in the same units (triangular lattice tiled
with hexagons makes more sense this way.) Finding the separation between data points on the x-y
plane is computed using Euclidean distance. Use B<replot> after setting this interactively.
If unset,(default) assume x and y coordinates have different units. That is, one might be time and another
length. When finding the separation between data points to compute the size of the tiling square,
x-axis and y-axis are treated separately. This does not work with triangular lattice.
Use B<replot> after setting this interactively.

B<-aspectratio> I<VALUE>
Sets the aspect ratio of the plot area. A value of 1 is square. A value greater (less) than 1 makes
a wide (tall) plot.

B<-numberpoly>  B<-nonumberpoly>
write numeric value in each hexagon.

B<-polyborder> B<-nopolyborder>
draw a black border around each polygon or not

B<-lattice> B<-nolattice>
draw the underlying triangular lattice. If used with square lattice
the results will be nonsensical.

B<-latticegray>  I<GRAYVALUE>
shade for the lattice lines if drawn

B<-xmin>,  B<-xmax,-ymin,-ymax>  I<FLOAT>
set boundaries of plot area, overriding automatic boundaries.  If
I<FLOAT> is ommitted, then the corresponding boundary is once again
set automatically.  If these are set interactivly, you must reread the
file with the "replot" command in order for them to take effect. (Or
use B<read> and then B<plot>.)

=head2      Density to Color map:

B<-cmgray>
Make a grayscale density plot. That is, the value of the data is represented by shades of gray.

With the following three color maps, the value of the data is represented
by the named color parameter (hue,saturation, or brightness). In each case
the remaining two color parameters may be set manually and will change the
appearance of the plot.

B<-cmhue>
(default)  set color map to 'hue' for density plot. This is a 'false color'
plot. If B<-cmhue> is set, then  B<-saturation> and B<-brightness> set constant
saturation and brightness

B<-cmbrightness>  I<HUE>
(HUE is from 0 to 1)
set color map to 'brightness' for density plot. An optional argument
sets the hue. The hue can also be set with B<-hue>. The saturation
can be set independently to a constant with B<-brightness>  I<SATURATION>.

B<-cmsaturation>   I<HUE>
(HUE is from 0 to 1)
set color map to 'saturation' for density plot. An optional argument
sets the hue.  The brightness
can be set independently to a constant with B<-brightness>  I<BRIGHTNESS>.

B<-cmsatbright>     I<hue>
(hue is from 0 to 1) set color map to 'satbright' for density plot. Both the saturation
and brightness are set by the data value.
An optional argument sets the hue.

The following three parameters set to a constant any hsb values that are I<not> mapped
from the data via  the color map chosen above. That is, B<-hue>, has no effect if B<-cmhue> is chosen, etc.

B<-hue>  I<HUE>
(default 1) from 0 to 1. Sets the hue of the colors representing the data.
This only has an effect if the hue is not controlled by the color map.

B<-saturation>  I<SATURATION>
(default 1) from 0 to 1. Sets the saturation of the colors representing the data.

B<-brightness>  I<BRIGHTNESS>
(default 1) from 0 to 1.  Sets the brightness of the colors representing the data.

The raw data is normalized so that it can be mapped to color hues
in the range 0 to 1. To use only a subset of these colors, the upper
and lower limits of this normalization can be changed. If grayscale plot is chosen via B<-cmgray>,
then these cmlo and cmhi are interpreted instead as grayscale values. If B<-cmsaturation> is
chosen, they are interpreted as saturation values, and likewise with B<-cmbrightness>.

B<-cmlo>  I<HUE>
(HUE is from 0 to 1 )(default 0) Lowest value of range of hue in mapping data to hue

B<-cmhi>  I<HUE>
(HUE is from 0 to 1) (default 1) Upper limit of range of hue.
For example, if these values for range of color parameter are reversed, the color mapping is reversed.

B<-uselinear>
(default) Do not raise the data values to a power prior to plotting.

B<-usepower>
raise data values to a power before mapping to colors

B<-power> I<POWER>
(default value .5) power to use with B<-usepower> for scaling data for color/grayscale map.

=head2     Labels, Ticks, Axes, Border, Key etc:

B<-title> I<'The Title'>
plot title drawn above frame.

B<-titleyoffset> I<FRAC>
Fractional part of frame height by which title is separtated from
frame. Ie, use this to move the title up and down.

B<-titlexoffset> I<FRAC>
Fractional part of plot width by which title is separtated from
frame. Ie, use this to move the title left and right.

B<-xlabel> I<'the x label'>
set the string used as the x-axis label.

B<-ylabel> I<'the y label'>
set the string used as the y-axis label.

B<-rotylabel>, B<-norotylabel>
(default) Rotate (or not) the y-axis label by 90 degrees

B<-xlabelxoffset> I<FRAC>
(default 0) Shift the xlabel left or right by I<FRAC> times
the plot width.

B<-xlabelyoffset> I<FRAC>
(default 0.07) Draw the xlabel at a distance  I<FRAC> times
the plot height below the plot frame.

B<-ylabelxoffset> I<FRAC>
(default 0.07) Draw the ylabel at a distance  I<FRAC> times
the plot height to the left of the plot frame.

B<-ylabelyoffset> I<FRAC>
(default 0) Shift the ylabel up or down by I<FRAC> times
the plot height.

B<-fontscale> I<SCALE>
(default value 1.0) Scale all character fonts by this factor. Characters
in various places have their own scaling; ie title, key, etc. B<fontscale> is an additional
factor that multiplies each of these.

B<-subscale> I<SCALE>
Scale subscript relative to normal script by this amount.

B<-supscale> I<SCALE>
Scale superscript relative to normal script by this amount.

B<-ssupscale> I<SCALE>
Scale super-superscript relative to normal script by this amount.

B<-listcolors> I<N>
print a list of color names (about 400) for use in strings (for the title, etc.)
If I<N> is given, then color names are listed in I<N> columns. I<N> defaults to four if the argument
is omitted.

B<-findcolors> I<STRING>
print a list of all color names
that contain I<STRING> as a substring. For example:
C<hexdens -findcolors red> lists all colors with 'red' in
the name.

B<-listsymbols> I<N>
print a list of Adobe symbols for use in strings (for the title, etc.)
If I<N> is given, then symbol names are listed in I<N> columns. I<N> defaults to four if the argument
is omitted. A few aliases to latex symbol names are given.

B<-key>  B<-nokey>
draw the color key. The color key shows the numerical value
correpsonding to colors on the plot. Default is set.

B<-keynbars>  I<NUM>
(default 33) the number of bars (that is the number of different colors) to draw in the color key.

B<-keylabelskip>  I<NUM>
(default 4) Print a numerical label on a color bar in the key for
only every NUMth bar. By default there are then 9 numerical labels on the color bars.

B<-keywidth> I<NUM>
(default 0.03) Width of key as a fraction of the framewidth.

B<-keyheight> I<NUM>
(default 1) Height of key as a fraction of the frameheight.

B<-keyxoffset> I<NUM>
(default 0.1) The fraction of the width of the frame of the horizontal offset
of the key from the right edge of the frame.

B<-keyyoffset> I<NUM>
(default 0) The fraction of the height of the frame of the vertical offset
 of the key from the bottom edge of the frame.

B<-keyexpraise> I<NUM>
(default 0.55) Fraction of character height to raise exponent in scientific notation in the key.



B<-explim>
(default 1) largest power of ten to write in normal, rather than scientific
notation in the key.

B<-keydigits> I<DIGITS>
(default 2) Number of digits to write in mantissa in key labels.

B<-ticklabeloffset>
changes distance of tick from frabme

B<-ticksshiftouter> B<-noticksshiftouter>
(default unset) Offset the outermost ticks slightly to make them more visible
in case they are obscured by the frame.

B<-ticklinew>  I<NUM>
scale factor for width of tick lines

B<-axislinew>  I<NUM>
scale factor for width of line in axes

B<-polylinew>  I<NUM>
scale factor for width of line around polygon

B<-framelinew>  I<NUM>
scale factor for width of line in frame.

B<-ticklength>  I<NUM>
(default 1) A scale factor for the ticklength.


These are scale factors for text in various places on the plot. In addition, there
is an overall scale factor set by B<-fontscale>.

B<-tickfontscale> I<NUM>
Scale factor for text labeling ticks (default 1)

B<-keyfontscale> I<NUM>
Scale factor for text labeling color bars in key (default 1)

B<-axisfontscale> I<NUM>

B<-exponentfontscale> I<NUM>

B<-numberpolyfontscale> I<NUM>

B<-shownorm>
show range of hue values rather than raw data range in key (see B<-showraw>)

B<-showraw>
(default is set) show range of raw data in key rather than hue values (see B<-shownorm>)

B<-yaxis> B<-noyaxis>
draw y-axis or not(default)

B<-xaxis> B<-noxaxis>
draw x-axis or not(default)

B<-axis> B<-noaxis>
(default)  draw both x and y axis, or neither

B<-ticks> B<-noticks>
Draw tick marks on all four sides of the frame (default set)

B<-ticksl> B<-noticksl>
Draw tick marks on left side of frame

B<-ticksr> B<-noticksr>
Draw tick marks on right side of frame

B<-tickst> B<-notickst>
Draw tick marks on top side of frame

B<-ticksb> B<-noticksb>
Draw tick marks on bottom side of frame

B<-frame> B<-noframe>
Draw a rectangular frame around the plot (default true)

B<-xbuf> I<XFRAC> , B<-ybuf> I<YFRAC>, B<-buf> I<FRAC> (default 0.03)
space left between plot and frame as a fraction of
plot width. In interactive mode, you must use B<replot> for this change to take effect. Use B<-buf> to
set both the x and y buffer fractions to the same value.

=head2  Output:

B<-outfile> I<FILENAME>
write the plot to file I<FILENAME> rather than the default, which is to append
a filename suffix (.ps,.eps,.pdf) to the input filename.

B<-infile> I<FILENAME>
The final non-option arguments on the command line are also interpreted as
input filenames. This is intended for interactive use. But the B<plot>
command also can set the input filename.

B<-display> B<-nodisplay>
Launch external viewer if possible (ghostview by default). The command to launch
the viewer is given by the C<$GvExe> and C<$GvOpts> parameters.
If unset, theen suppress launching viewer, even in interactive mode.

B<-plotwidth> I<PLOTWIDTH>  (default 12)
the width of the plotted data area in centimeters. If the plot
is too big for the page and eps or pdf are requested, then the plot is automatically rescaled
to fit on the page.

B<-viewer> I<VIEWERNAME>
(default C<xpdf>) Name of the viewer program used to view plots interactively.
This may be one of C<xpdf> and C<gv>. In interactive mode, C<set viewer TAB TAB>
may show a choice of viewers.

B<-viewerscale> I<SCALE>
If using gv as a viewer, scale (that is, magnify) the viewing area by
this amount. If you use a different viewer, change the variable $ViewerScaleOpt in the
configuration file.

Note that if you change the file type in interactive mode with the following three commands, you
must enter B<viewer> to launch a new viewer for the new output plot.

B<-ps>
Set the output file format to ps, PostScript.

B<-eps>
Set the output file format to eps, Encapsulated PostScript.
(must have ghostscript installed)

B<-pdf>
Set the output file format to pdf. (default)
(must have ghostscript installed)

B<-latexrun>  B<-nolatexrun>
(default unset) Process the text (eg in title and labels) as latex commands. This calls
the ipe program to run latex and replace the text with the output of latex.
For instance C<set xlabel '$e^{x^2}$'> will give the desired result. The numbers in the
key are not rendered correctly by ipe unless the B<-latexnumbers> option is also
set. The pdftoipe program does not try to recenter the resulting image. You may have
to do something like
C<set xlabel ' \white .................\black  $e^{x^2}$'>, to put a series of invisible
dots to acheive centering. Or try the option B<-xlabelxoffset>. Backslashes in
latex code must be escaped with a backslash. Ie. C<$\\frac{1}{2}$>

B<-latexnumbers>
Write numbers in the key as latex commands. If option B<-latexrun> is set, they
will be processed by latex with the ipe program.

B<-bbpad> I<PSPOINTS>
(default 5) Number of PostScript points by which to enlarge the bounding box in each direction.
Increase this if part of the plot is clipped at the edge. Decrease this if too much white space
is shown around the plot. (This is relevant for 'eps' and 'pdf' formats)

B<-whitebox> B<-nowhitebox>
(default on) Draw a white (invisible) frame around
the entire plot (including amount specified by option B<bbpad>.)
Some programs such as ipe recompute the bounding box, which defeats
the purpose of bbpad. This white frame prevents these programs from erroneously clipping
visible parts of the plot.

B<-portrait>
(default)

B<-landscape>
Rotate the plot by 90 degrees.

=head2  Miscellaneous:

B<-readline> B<-noreadline>
If set, (some of) command history, command line editing and command completion are
enabled. This only works in interactive mode and depends on having one of
the  perl readline libraries installed (only the perl gnu readline library provides completion).

B<-autodata> B<-noautodata>
(default is set) Attempt to detect the data file format. A line with three columns of
data is interpreted as "x y val". A line with more data on a line is assumed to be
on a grid ('grided') If B<-grided> is set, then this detection is overriden even
if B<-autodata> is set. For instance, if the data is intended to be on a grid that is
three data points wide (rather uncommon), each line will be misinterpreted
as "x y val".

B<-grided>  B<-nogrided>
(default is unset) If unset then data file must have lines of triples "x y value".
(But see option B<autodata> to set data format automatically.)
If B<-grided> then  the data file must have rows separated by newlines interpreted as follows:
The number in row j, column i is the value of a data point at position i,j;
that is, the data is assumed to be on a grid of unit squares.

B<-ex> I<n>
write example plot number I<n>. If B<-display> is given, show plot in viewer.

B<-demo> I<n>
write and display all example plots. If optional number I<n> is given,
there is a pause of I<n> seconds between plots. Otherwise the user is prompted
for the next example.

B<-v>
verbose print more messages during operation.

B<-version>
print hexdens version number. Exit if not in interactive mode.

B<-test>
run the test suite. requires first running B<-generatetest> with a good copy of hexdens.

B<-generatetest>
generate the test suite. Subsequent testing with `hexdens -test` will compare output
to the generated files.

=for trihelp options stop

=head1 REQUIREMENTS AND DEPENDENCIES

Hexdens requires a standard perl installation to produce postscript output.

ghostscript (C<gs>) must  be installed to produce eps and pdf output.

ghostview (C<gv>) or C<xpdf> must be installed if you want
hexdens to launch viewers at the appropriate time. C<xpdf> is
the preferred option. Use of other viewers is not supported.

While not necessary for interactive mode, a perl readline
package must be installed in order for readline support
(command history, command line editing, tab completion) to
be enabled. This makes the interactive mode much more friendly.
There are two different perl readline modules.
Command line completion in interactive mode is only supported if
the perl gnu readline interfaces is avaialable. This will be in
in a package named something like I<libterm-readline-gnu-perl>.

The program I<ipe> is necessary for the B<-latexrun> option to process latex
text.

If the perl module I<File::Which> is installed then it is used to search for
helper programs. On linux/unix, this is not necessary.
But for other operating systems, hexdens only supports discovering helper programs
with I<File::Which>.

kdialog is used by command gset.

=head1  SAVING AND RESTORING SETTINGS

If you need to set more options than are available on the command line (or prefer to use
a configuration file) type

C<hexdens -paramfile>

to generate the file F<.hexdens> with the default parameters
in the current directory.  Then edit this file to suit your
needs. It will be read each time hexdens is run.  This
parameter file is moderately well commented.  Any parameters that
are deleted from or 'commented out' of F<.hexdens> will be
determined by the built-in defaults.  If you copy F<.hexdens>
to F<infilename.p> and edit the result, then, only when
processing data file F<infile>, the file F<infilename.p>
will be read after F<.hexdens> and any parameters present
will override previously set values. There
is a copy of F<.hexdens> inside the F<hexdens> executable program,
which is a plain text file (a perl program). If you edit these internal parameters,
then they become the default parameters.
In summary, parameters are set in this order: 1) internal (default) parameters,
2) parameters in F<.hexdens>, 3) parameters in F<infilename.p>,
4) parameters in F<save.hexdens> (saved with the B<save> command),
5) parameters
given on the command line. 6) parameters set interactively.
In this list, settings with higher numbers override
settings with lower numbers. In addition, the command B<load> can be used at anytime interactively
to restore parameters settings that were saved with B<save> F<FILENAME>.

On exiting hexdens normally the interactive command history is automatically saved
(by gnu readline). The history will be read the next time hexdens is started so that
the commands from the previous session are available in the history.

=head1 TROUBLESHOOTING

If hexdens won't start or misbehaves, try deleting parameter files 'save.hexdens'
and  '.hexdens' as they may be out of date.

=head1 INTERACTIVE SHELL

The subsection 'Interactive mode' above presented the basic operation and
commands of the interactive mode. This section deals with features of the
interactive shell with 'readline' enabled. For more information see the
gnu readline library documentation.

=head1 AUTHOR

John Lapeyre <lapeyre aaat physics doot arizona dat edu>

=head1 BUGS

set xlabel '\eta' gives  "failed to return bounding box" error
  workaround is to use ' \eta'

=head1 FILES

Hexdens is distributed as a single file.

=head1 COPYRIGHT

Copyright 2003, 2011, 2014, 2018 John Lapeyre, All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.


=cut

=for comment
 The default values of the user parameters are set be eval'ing
 the string $ParameterList. This string can also be printed to
 a file that can be edited and read, as well.


=cut

=for comment
  This prints some messages if the user has selected verbose mode.


=cut

=begin comment

  This block parses command line options and takes actions before
  and routines are executed.

=end comment


=cut

=begin comment

 read_data():
  input: $file  --  string containing data file name.
  output:  These are not returned, but are set in read_data.
        @Xs, @Ys @V -- arrays contianing triplets of numbers from each
                       line of data file.
        $max_v,$min_v,$Xlo,$Xhi,$Ylo,$Yhi -- max and mins of x,y,v calculate
                    as data file is read.
	$XBlo,$XBhi,$YBlo,$YBhi -- limits that are moved a bit farther apart
                     in order to provide a buffer for the plot frame.

=end comment


=cut

=begin comment

The eps file is altered in the same way that epstopdf alters it:
The bounding box info is used to translate the plot so that one
corner is at 0,0. The bounding box is then rewrittend accordingly
and
   <</PageSize [x y]>> setpagedevice line
is added to be exactly the size of the bounding box. But this line doesnt
seem to be useful. In converting the eps to pdf, the gs arguments -dDEVICEWIDTHPOINTS
(and height) are essential.

=end comment


=cut

=begin comment


    gsave
    1 setlinewidth
    newpath
    100.173997 200.43399 moveto
    100.173997 590.989982  lineto
    609.493982 590.989982 lineto
    609.493982 200.433994 lineto

=end comment



=cut

=begin comment

 Routines for computing ticks; These routines are independent of the
 rest of the program. These routines are a perl translation
 (and modification) of  Numeric Python routines. The python routines carry
 the following copyright notice.

#--------------------------------------------------------------------------------
#
#  Helper functions for calculating axis tick related values (i.e. bounds and
#  intervals)
#  Written by: David C. Morrill (based on similar routines written by Eric Jones)
#
#  Date: 07/10/2002
#
#  (c) Copyright 2002 by Enthought, Inc.
#
#--------------------------------------------------------------------------------

=end comment


=cut

=begin comment

Find locations for axis tick marks.

Calculate the location for tick marks on an axis. data_low and data_high
specify the maximum and minimum values of the data along this axis.
bounds_low, bound_high and tick_intervalspecify how the axis end points
and tick interval are calculated. An array of tick mark locations is
returned from the function.  The first and last tick entries are the
axis end points.

        data_low,   The maximum and minimum values of the data long this axis.
        data_high:  If any of the bound settings are 'auto' or 'fit', the axis
                    traits are calculated automatically from these values.
        bound_low:  Can be 'auto', 'fit' or a number.
        bound_high: If a number,the axis trait is set to that value.  If the
                    value is 'auto', the trait is calculated automatically.
                    The value can also be 'fit' in which case the axis end
                    point is set equal to the corresponding data_low/data_high
                    value.
        tick_interval: Can be 'auto' or a positve number specifying the length
                    of the tick interval, or a negative integer specifying the
                    number of tick intervals.

        $magic_arr, $division_arr.  References to arrays. magic_arr is the list of
                    numbers that can be the basic tick interval. Only the mantissa is
		    given in this list. division_arr is a list of possible numbers of
		    ticks. (I think the max+1 and min-1 are also possible.) auto_interval
		    routine picks the mantissa and number of ticks pair that most nearly
		    fills the data window with ticks.

=end comment


=cut

=begin comment

       Calculate the tick intervals for a graph axis.

        Description:
        The boundaries for the data to be plotted on the axis are:
            data_bounds = (lower,upper)

        A choice is made between 3 to 9 ticks marks (including end points)
        and tick intervals at 1, 2, 2.5, 5, 10, 20, ...

        Returns:
        interval -- float. tick mark interval for axis

=end comment


=cut

=begin comment

    Calculate an appropriate upper and lower bounds for the axis from
    the the data_bounds (lower, upper) and the given axis interval.  The
    boundaries will either hit exactly on the lower and upper values
    or on the tick mark just beyond the lower and upper values.

=end comment


=cut

=begin comment

        Find an axis end point that includes the value 'end_point'.  If the
        tick mark interval results in a tick mark hitting directly on the
        end_point, end_point is returned.  Otherwise, the location of the tick
        mark just past the end_point is returned. end is 'lower' or 'upper' to
        specify whether end_point is at the lower or upper end of the axis.

=end comment


=cut

=begin comment

gv can be set to 'watch' for a file to change and reload it. The watch interval is
1 s by default and can be set as low as 500ms with a resource file. yuck. Also
it can be sent the signal SIGUP (or 1) to reload, but this only works if the file
has changed (hmm maybe if the date is newer).
Signaling seems to be working now. It is much faster than waiting. The display updates
quickly.

=end  comment


=cut

